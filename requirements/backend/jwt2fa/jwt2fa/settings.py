"""
Django settings for jwt2fa project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import hvac
from pathlib import Path


# Récupération de l'adresse de Vault et du token via variables d'environnement
VAULT_ADDR = os.environ.get('VAULT_ADDR', 'http://localhost:8200')
VAULT_TOKEN = os.environ.get('VAULT_TOKEN', 'root')  # En test, root ; en prod, un token restreint

# Création du client hvac pour se connecter à Vault
client = hvac.Client(url=VAULT_ADDR, token=VAULT_TOKEN)

def get_vault_secret(path):
    """
    Tente de lire un secret stocké dans Vault (KV v2).
    Renvoie un dict clé/valeur, ou un dict vide en cas d'erreur.
    """
    try:
        response = client.secrets.kv.read_secret_version(path=path)
        return response['data']['data']
    except Exception as e:
        return {}

# ---------------------
# 2) Récupération des secrets depuis Vault
#    (vous devez avoir : vault kv put secret/postgres POSTGRES_DB=..., etc.)
# ---------------------
vault_postgres = get_vault_secret('postgres')
vault_django   = get_vault_secret('django')
vault_email    = get_vault_secret('email')
# Vous pouvez créer d'autres chemins si besoin, par ex. secret/other_settings

# ---------------------
# 3) Chemin de base du projet
# ---------------------
BASE_DIR = Path(__file__).resolve().parent.parent


# ---------------------
# 4) Récupération de la SECRET_KEY et DEBUG depuis Vault
# ---------------------
# Fallback : si Vault est vide ou inaccessible, on prend la valeur .env ou un default
SECRET_KEY = vault_django.get('SECRET_KEY', os.getenv('SECRET_KEY', 'django-insecure-XXXXX'))
DEBUG = vault_django.get('DEBUG', os.getenv('DEBUG', 'True')) == 'True'

# ALLOWED_HOSTS (ex. "localhost,127.0.0.1"), on split sur la virgule
raw_allowed_hosts = vault_django.get('ALLOWED_HOSTS', os.getenv('ALLOWED_HOSTS', ''))
ALLOWED_HOSTS = [h.strip() for h in raw_allowed_hosts.split(',')] if raw_allowed_hosts else []


# Application definition
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # application api REST 
    'rest_framework',
    'rest_framework_simplejwt',
    
    'corsheaders',

    # application custom
    'signupApp',
    'loginApp',
    'accountApp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'jwt2fa.urls'

CORS_ALLOW_ALL_ORIGINS = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jwt2fa.wsgi.application'


# ---------------------
# 5) Configuration de la base de données
# ---------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': vault_postgres.get('POSTGRES_DB', os.getenv('POSTGRES_DB', 'default_db_name')),
        'USER': vault_postgres.get('POSTGRES_USER', os.getenv('POSTGRES_USER', 'default_user')),
        'PASSWORD': vault_postgres.get('POSTGRES_PASSWORD', os.getenv('POSTGRES_PASSWORD', 'default_password')),
        'HOST': vault_postgres.get('POSTGRES_HOST', os.getenv('POSTGRES_HOST', 'localhost')),
        'PORT': vault_postgres.get('POSTGRES_PORT', os.getenv('POSTGRES_PORT', '5432')),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'signupApp.SignupUser'

# ---------------------
# 6) Configuration Email
# ---------------------
# Fallback : .env ou default
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = vault_email.get('EMAIL_HOST_USER', os.getenv('EMAIL_HOST_USER'))
EMAIL_HOST_PASSWORD = vault_email.get('EMAIL_HOST_PASSWORD', os.getenv('EMAIL_HOST_PASSWORD'))


# Répertoire où seront stockés les fichiers média
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'DEBUG',
#     },
# }

REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'jwt2fa.auth.CookieJWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
}

SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = True

CORS_ALLOWED_ORIGINS = [
    "https://127.0.0.1",
    "https://localhost",
]
CORS_ALLOW_CREDENTIALS = True
